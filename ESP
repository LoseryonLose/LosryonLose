getgenv().a = game:GetService("Players")
getgenv().b = a.LocalPlayer;
getgenv().c = {}
getgenv().d = game:GetService("RunService")
getgenv().e = workspace.CurrentCamera;
getgenv().f = "2.7.1"
getgenv().g = Color3.fromRGB(75,0,130)
getgenv().h = {}
getgenv().i = b:GetMouse()
getgenv().j = false;
getgenv().k = false;
getgenv().l = false;
getgenv().m = Color3.fromRGB(75,0,130)
getgenv().n = Color3.fromRGB(255,0,0)
getgenv().o = Color3.fromRGB(255,255,255)
getgenv().p = 3;
getgenv().q = 1;
getgenv().r = 4000;
getgenv().s = false;
getgenv().t = "2D"
getgenv().u = "Bottom of Screen"
getgenv().v = "Head"
getgenv().w = 15;
getgenv().x = false;
getgenv().y = false;
getgenv().z = false;
getgenv().A = false;
getgenv().B = false;
getgenv().C = false;
for D, E in next, a:GetChildren() do
	c[E.Name] = {
		Line = Drawing.new("Line"),
		ViewLine = Drawing.new("Line"),
		HeadDot = Drawing.new("Circle"),
		Bones = {
			R15 = {
				Head = Drawing.new("Line"),
				UpperTorso = Drawing.new("Line"),
				RightShoulder = Drawing.new("Line"),
				LeftShoulder = Drawing.new("Line"),
				RightUpperArm = Drawing.new("Line"),
				LeftUpperArm = Drawing.new("Line"),
				RightLowerArm = Drawing.new("Line"),
				LeftLowerArm = Drawing.new("Line"),
				RightGroin = Drawing.new("Line"),
				LeftGroin = Drawing.new("Line"),
				RightUpperLeg = Drawing.new("Line"),
				LeftUpperLeg = Drawing.new("Line"),
				RightLowerLeg = Drawing.new("Line"),
				LeftLowerLeg = Drawing.new("Line")
			},
			R6 = {
				Head = Drawing.new("Line"),
				Torso = Drawing.new("Line"),
				LeftShoulder = Drawing.new("Line"),
				RightShoulder = Drawing.new("Line"),
				LeftArm = Drawing.new("Line"),
				RightArm = Drawing.new("Line"),
				LeftGroin = Drawing.new("Line"),
				RightGroin = Drawing.new("Line"),
				LeftLeg = Drawing.new("Line"),
				RightLeg = Drawing.new("Line")
			}
		},
		Boxes = {
			DDD = {
				TopFront = Drawing.new("Line"),
				TopBack = Drawing.new("Line"),
				TopLeft = Drawing.new("Line"),
				TopRight = Drawing.new("Line"),
				FrontLeft = Drawing.new("Line"),
				FrontRight = Drawing.new("Line"),
				BackLeft = Drawing.new("Line"),
				BackRight = Drawing.new("Line"),
				BottonFront = Drawing.new("Line"),
				BottomBack = Drawing.new("Line"),
				BottomLeft = Drawing.new("Line"),
				BottomRight = Drawing.new("Line")
			},
			DD = {
				Top = Drawing.new("Line"),
				Left = Drawing.new("Line"),
				Right = Drawing.new("Line"),
				Bottom = Drawing.new("Line")
			}
		},
		HealthBar = {
			Back = Drawing.new("Line"),
			Front = Drawing.new("Line")
		}
	}
end;
getgenv().F = function()
	for G, E in next, c do getgenv() H = function(table)
			for G, E in pairs(table) do
				if type(E) == "table" and E.ZIndex ~= 0 then
					H(E)
				elseif type(E) == "table" then
					E.Visible = false
				end
			end
		end;
		H(E)
	end
end;
getgenv().I = function(J)getgenv().H = function(table)
		for G, E in pairs(table) do
			if type(E) == "table" and E.ZIndex ~= 0 then
				H(E)
			elseif type(E) == "table" then
				E:Remove()
			end
		end
	end;
	H(c[J])
	c[J] = nil
end;
getgenv().K =  function()
	local L = c;
	for G, D in next, c do
		if not a:FindFirstChild(tostring(G)) then
			I(G)
		end
	end;
	for D, E in next, a:GetChildren() do
		if not L[E.Name] then
			L[E.Name] = {
				JoinTime = os.date("%Y-%m-%d %H:%M:%S"),
				Line = Drawing.new("Line"),
				ViewLine = Drawing.new("Line"),
				HeadDot = Drawing.new("Circle"),
				Bones = {
					R15 = {
						Head = Drawing.new("Line"),
						UpperTorso = Drawing.new("Line"),
						RightShoulder = Drawing.new("Line"),
						LeftShoulder = Drawing.new("Line"),
						RightUpperArm = Drawing.new("Line"),
						LeftUpperArm = Drawing.new("Line"),
						RightLowerArm = Drawing.new("Line"),
						LeftLowerArm = Drawing.new("Line"),
						RightGroin = Drawing.new("Line"),
						LeftGroin = Drawing.new("Line"),
						RightUpperLeg = Drawing.new("Line"),
						LeftUpperLeg = Drawing.new("Line"),
						RightLowerLeg = Drawing.new("Line"),
						LeftLowerLeg = Drawing.new("Line")
					},
					R6 = {
						Head = Drawing.new("Line"),
						Torso = Drawing.new("Line"),
						LeftShoulder = Drawing.new("Line"),
						RightShoulder = Drawing.new("Line"),
						LeftArm = Drawing.new("Line"),
						RightArm = Drawing.new("Line"),
						LeftGroin = Drawing.new("Line"),
						RightGroin = Drawing.new("Line"),
						LeftLeg = Drawing.new("Line"),
						RightLeg = Drawing.new("Line")
					}
				},
				Boxes = {
					DDD = {
						TopFront = Drawing.new("Line"),
						TopBack = Drawing.new("Line"),
						TopLeft = Drawing.new("Line"),
						TopRight = Drawing.new("Line"),
						FrontLeft = Drawing.new("Line"),
						FrontRight = Drawing.new("Line"),
						BackLeft = Drawing.new("Line"),
						BackRight = Drawing.new("Line"),
						BottonFront = Drawing.new("Line"),
						BottomBack = Drawing.new("Line"),
						BottomLeft = Drawing.new("Line"),
						BottomRight = Drawing.new("Line")
					},
					DD = {
						Top = Drawing.new("Line"),
						Left = Drawing.new("Line"),
						Right = Drawing.new("Line"),
						Bottom = Drawing.new("Line")
					}
				},
				HealthBar = {
					Back = Drawing.new("Line"),
					Front = Drawing.new("Line")
				}
			}
		end
	end;
	c = L
end;getgenv().M = function M(N)
	local O = N.CFrame;
	local P = N.Size;
	local Q = {}
	local R = O + O.LookVector * P.Z / 2;
	local S = O - O.LookVector * P.Z / 2;
	local T = R + R.UpVector * P.Y / 2;
	local U = R - R.UpVector * P.Y / 2;
	local V = S + S.UpVector * P.Y / 2;
	local W = S - S.UpVector * P.Y / 2;
	Q.topFrontRight = (T + T.RightVector * P.X / 2).Position;
	Q.topFrontLeft = (T - T.RightVector * P.X / 2).Position;
	Q.bottomFrontRight = (U + U.RightVector * P.X / 2).Position;
	Q.bottomFrontLeft = (U - U.RightVector * P.X / 2).Position;
	Q.topBackRight = (V + V.RightVector * P.X / 2).Position;
	Q.topBackLeft = (V - V.RightVector * P.X / 2).Position;
	Q.bottomBackRight = (W + W.RightVector * P.X / 2).Position;
	Q.bottomBackLeft = (W - W.RightVector * P.X / 2).Position;
	return Q
end;
getgenv().X = function(Y)
	local Z = {
		head = {},
		torso = {},
		leftArm = {},
		rightArm = {},
		leftLeg = {},
		rightLeg = {}
	}
	local _ = M(Y:FindFirstChild("Head"))
	local a0 = M(Y:FindFirstChild("Torso"))
	local a1 = M(Y:FindFirstChild("Left Arm"))
	local a2 = M(Y:FindFirstChild("Right Arm"))
	local a3 = M(Y:FindFirstChild("Left Leg"))
	local a4 = M(Y:FindFirstChild("Right Leg"))
	Z.head.to = e:WorldToViewportPoint((_.topFrontLeft + _.bottomBackRight) / 2)
	Z.head.from = e:WorldToViewportPoint((_.bottomFrontLeft + _.bottomBackRight) / 2)
	Z.torso.to = e:WorldToViewportPoint((a0.topFrontLeft + a0.topBackRight) / 2)
	Z.torso.from = e:WorldToViewportPoint((a0.bottomFrontLeft + a0.bottomBackRight) / 2)
	Z.rightArm.to = e:WorldToViewportPoint((a2.topFrontLeft + a2.topBackRight) / 2)
	Z.rightArm.from = e:WorldToViewportPoint((a2.bottomFrontLeft + a2.bottomBackRight) / 2)
	Z.leftArm.to = e:WorldToViewportPoint((a1.topFrontLeft + a1.topBackRight) / 2)
	Z.leftArm.from = e:WorldToViewportPoint((a1.bottomFrontLeft + a1.bottomBackRight) / 2)
	Z.leftLeg.to = e:WorldToViewportPoint((a3.topFrontLeft + a3.topBackRight) / 2)
	Z.leftLeg.from = e:WorldToViewportPoint((a3.bottomFrontLeft + a3.bottomBackRight) / 2)
	Z.rightLeg.to = e:WorldToViewportPoint((a4.topFrontLeft + a4.topBackRight) / 2)
	Z.rightLeg.from = e:WorldToViewportPoint((a4.bottomFrontLeft + a4.bottomBackRight) / 2)
	return Z
end;getgenv().a5 = function(Y)
	local Z = {
		head = {},
		upperTorso = {},
		rightUpperArm = {},
		rightLowerArm = {},
		leftUpperArm = {},
		leftLowerArm = {},
		rightUpperLeg = {},
		rightLowerLeg = {},
		leftUpperLeg = {},
		leftLowerLeg = {},
		torso = {},
		leftArm = {},
		rightArm = {},
		leftLeg = {},
		rightLeg = {}
	}
	local _ = M(Y:FindFirstChild("Head"))
	local a6 = M(Y:FindFirstChild("UpperTorso"))
	local a7 = M(Y:FindFirstChild("RightUpperArm"))
	local a8 = M(Y:FindFirstChild("RightLowerArm"))
	local a9 = M(Y:FindFirstChild("LeftUpperArm"))
	local aa = M(Y:FindFirstChild("LeftLowerArm"))
	local ab = M(Y:FindFirstChild("RightUpperLeg"))
	local ac = M(Y:FindFirstChild("RightLowerLeg"))
	local ad = M(Y:FindFirstChild("LeftUpperLeg"))
	local ae = M(Y:FindFirstChild("LeftLowerLeg"))
	Z.head.to = e:WorldToViewportPoint((_.topFrontLeft + _.bottomBackRight) / 2)
	Z.head.from = e:WorldToViewportPoint((_.bottomFrontLeft + _.bottomBackRight) / 2)
	Z.upperTorso.to = e:WorldToViewportPoint((a6.topFrontLeft + a6.topBackRight) / 2)
	Z.upperTorso.from = e:WorldToViewportPoint((a6.bottomFrontLeft + a6.bottomBackRight) / 2)
	Z.rightUpperArm.to = e:WorldToViewportPoint((a7.topFrontLeft + a7.topBackRight) / 2)
	Z.rightUpperArm.from = e:WorldToViewportPoint((a7.bottomFrontLeft + a7.bottomBackRight) / 2)
	Z.rightLowerArm.to = e:WorldToViewportPoint((a8.topFrontLeft + a8.topBackRight) / 2)
	Z.rightLowerArm.from = e:WorldToViewportPoint((a8.bottomFrontLeft + a8.bottomBackRight) / 2)
	Z.leftUpperArm.to = e:WorldToViewportPoint((a9.topFrontLeft + a9.topBackRight) / 2)
	Z.leftUpperArm.from = e:WorldToViewportPoint((a9.bottomFrontLeft + a9.bottomBackRight) / 2)
	Z.leftLowerArm.to = e:WorldToViewportPoint((aa.topFrontLeft + aa.topBackRight) / 2)
	Z.leftLowerArm.from = e:WorldToViewportPoint((aa.bottomFrontLeft + aa.bottomBackRight) / 2)
	Z.rightUpperLeg.to = e:WorldToViewportPoint((ab.topFrontLeft + ab.topBackRight) / 2)
	Z.rightUpperLeg.from = e:WorldToViewportPoint((ab.bottomFrontLeft + ab.bottomBackRight) / 2)
	Z.rightLowerLeg.to = e:WorldToViewportPoint((ac.topFrontLeft + ac.topBackRight) / 2)
	Z.rightLowerLeg.from = e:WorldToViewportPoint((ac.bottomFrontLeft + ac.bottomBackRight) / 2)
	Z.leftUpperLeg.to = e:WorldToViewportPoint((ad.topFrontLeft + ad.topBackRight) / 2)
	Z.leftUpperLeg.from = e:WorldToViewportPoint((ad.bottomFrontLeft + ad.bottomBackRight) / 2)
	Z.leftLowerLeg.to = e:WorldToViewportPoint((ae.topFrontLeft + ae.topBackRight) / 2)
	Z.leftLowerLeg.from = e:WorldToViewportPoint((ae.bottomFrontLeft + ae.bottomBackRight) / 2)
	return Z
end;
getgenv().af =  function()
	K()getgenv().ag = function (ah, ai, aj, ak, al, am, an)
		local ao = ah;
		ao.Visible = al;
		ao.From = aj;
		ao.To = ai;
		ao.Color = ak;
		ao.Thickness = am;
		ao.Transparency = an
	end;getgenv().ap = function(ah, aq, ak, al, am, ar, an, as, at)
		local au = ah;
		au.Visible = al;
		au.Position = aq;
		au.Color = ak;
		au.Thickness = am;
		au.NumSides = as;
		au.Radius = at;
		au.Filled = ar;
		au.Transparency = an
	end;
	for G, E in next, c do
		local av = a[G]
		local aw = {
			["286090429"] = {
				getgenv().Health = function()
					return av.NRPBS.Health.Value
				end,
				getgenv().MaxHealth = function()
					return av.NRPBS.MaxHealth.Value
				end
			}
		}
		local ax = av.Character;
		if aw[tostring(game.PlaceId)] and aw[tostring(game.PlaceId)].GetCharacter ~= nil then
			ax = aw[game.PlaceId].GetCharacter(av)
		end;
		if av ~= b and ax and ax:FindFirstChild("Head") and ax:FindFirstChild("HumanoidRootPart") then
			local ay, az = e:WorldToViewportPoint(ax.Head.CFrame.Position)
			local aA = ay.X;
			local aB = ay.Y;
			local _ = ax:FindFirstChild("Head")
			local aC = m;
			if a[G].Team ~= b.Team then
				aC = n
			end;
			if l then
				aC = a[G].TeamColor.Color
			end;
			if k then
				local aD = {
					b.Character,
					e
				}
				for D, E in pairs(h) do
					table.insert(aD, E)
				end;
				local aE = RaycastParams.new()
				aE.FilterType = Enum.RaycastFilterType.Blacklist;
				aE.FilterDescendantsInstances = aD;
				aE.IgnoreWater = true;
				local aF = e.CFrame.Position;
				local aG = (_.Position - aF).unit * (e.CFrame.Position - _.Position).Magnitude;
				local aH = workspace:Raycast(aF, aG, aE)
				if aH then
					local aI = aH.Instance;
					if aI.Transparency >= .3 or not aI.CanCollide and aI.ClassName ~= Terrain then
						h[#h + 1] = aI
					end;
					if not aI:IsDescendantOf(ax) then
						az = false
					end
				end
			end;
			if j and a[G].Team == b.Team then
				az = false
			end;
			if (e.CFrame.Position - _.Position).Magnitude > r then
				az = false
			end;
			if s and ax.Humanoid.Health <= 0 then
				az = false
			end;local function aJ(O)
				local aK = e:WorldToViewportPoint(O)
				return Vector2.new(aK.X, aK.Y)
			end;
			if x then
				local aL = {
					getgenv().["Bottom of Screen"] = function()
						return Vector2.new(e.ViewportSize.X / 2, e.ViewportSize.Y)
					end,
					getgenv().["Center of Screen"] = function()
						return Vector2.new(e.ViewportSize.X / 2, e.ViewportSize.Y / 2)
					end,
					getgenv().["Mouse"] = function()
						return Vector2.new(i.X, i.Y + (e.ViewportSize.Y - i.ViewSizeY) / 2)
					end
				}
				local aM = {
					getgenv().["Head"] = function()
						return Vector2.new(math.clamp(aA, 0, e.ViewportSize.X), math.clamp(aB, 0, e.ViewportSize.Y))
					end,
					getgenv().["Torso"] = function()
						local a0 = ax:FindFirstChild("UpperTorso") or ax:FindFirstChild("Torso")
						local aN = e:WorldToViewportPoint(a0.CFrame.Position or a0.CFrame.Position)
						return Vector2.new(math.clamp(aN.X, 0, e.ViewportSize.X), math.clamp(aN.Y, 0, e.ViewportSize.Y))
					end,
					getgenv().["Bottom of Player"] = function()
						local aO, aP = ax:GetBoundingBox()
						aO = aO - (aO.Position - ax.HumanoidRootPart.CFrame.Position)
						local aQ = M({
							CFrame = aO,
							Size = aP
						})
						return Vector2.new(math.clamp(aJ((aQ.bottomFrontRight + aQ.bottomBackLeft) / 2).X, 0, e.ViewportSize.X), math.clamp(aJ((aQ.bottomFrontRight + aQ.bottomBackLeft) / 2).Y, 0, e.ViewportSize.Y))
					end
				}
				ag(E.Line, aM[v](), aL[u](), aC, az, p, q)
			end;
			if C then
				local aR = (b.Character.HumanoidRootPart.Position - ax.HumanoidRootPart.Position).Magnitude;
				local aS = ax.Head.CFrame;
				aS = aS + aS.LookVector * w;
				ag(E.ViewLine, aJ(aS.Position), Vector2.new(math.clamp(aA, 0, e.ViewportSize.X), math.clamp(aB, 0, e.ViewportSize.Y)), o, az, math.clamp(1 / aR * 100, 0.1, 2), q)
			end;
			if z then
				local aT = M(ax.Head)
				local aU = e:WorldToViewportPoint(aT.topFrontLeft)
				local aV = e:WorldToViewportPoint(aT.bottomBackRight)
				local aW = e:WorldToViewportPoint(aT.topFrontRight)
				local aX = e:WorldToViewportPoint(aT.bottomBackLeft)
				local aY = e:WorldToViewportPoint(aT.bottomFrontLeft)
				local aZ = (Vector2.new(aU.X, aU.Y) - Vector2.new(aV.X, aV.Y)).Magnitude / 6;
				local a_ = (Vector2.new(aW.X, aW.Y) - Vector2.new(aX.X, aX.Y)).Magnitude / 6;
				local b0 = (Vector2.new(aW.X, aW.Y) - Vector2.new(aY.X, aY.Y)).Magnitude / 6;
				local at = (aZ + a_) / 2;
				ap(E.HeadDot, Vector2.new(math.clamp(aA, 0, e.ViewportSize.X), math.clamp(aB, 0, e.ViewportSize.Y)), aC, az, 1, true, q, 12, at)
			end;
			if y then
				local b1 = ax.Humanoid.RigType.Name;
				if b1 == "R15" then
					local b2 = a5(ax)
					ag(E.Bones[b1].Head, Vector2.new(b2.head.to.X, b2.head.to.Y), Vector2.new(b2.upperTorso.to.X, b2.upperTorso.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].UpperTorso, Vector2.new(b2.upperTorso.to.X, b2.upperTorso.to.Y), Vector2.new(b2.upperTorso.from.X, b2.upperTorso.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightShoulder, Vector2.new(b2.rightUpperArm.to.X, b2.rightUpperArm.to.Y), Vector2.new(b2.upperTorso.to.X, b2.upperTorso.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightUpperArm, Vector2.new(b2.rightUpperArm.to.X, b2.rightUpperArm.to.Y), Vector2.new(b2.rightUpperArm.from.X, b2.rightUpperArm.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightLowerArm, Vector2.new(b2.rightLowerArm.from.X, b2.rightLowerArm.from.Y), Vector2.new(b2.rightUpperArm.from.X, b2.rightUpperArm.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftShoulder, Vector2.new(b2.leftUpperArm.to.X, b2.leftUpperArm.to.Y), Vector2.new(b2.upperTorso.to.X, b2.upperTorso.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftUpperArm, Vector2.new(b2.leftUpperArm.to.X, b2.leftUpperArm.to.Y), Vector2.new(b2.leftUpperArm.from.X, b2.leftUpperArm.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftLowerArm, Vector2.new(b2.leftLowerArm.from.X, b2.leftLowerArm.from.Y), Vector2.new(b2.leftUpperArm.from.X, b2.leftUpperArm.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightGroin, Vector2.new(b2.rightUpperLeg.to.X, b2.rightUpperLeg.to.Y), Vector2.new(b2.upperTorso.from.X, b2.upperTorso.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftGroin, Vector2.new(b2.leftUpperLeg.to.X, b2.leftUpperLeg.to.Y), Vector2.new(b2.upperTorso.from.X, b2.upperTorso.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightUpperLeg, Vector2.new(b2.rightUpperLeg.to.X, b2.rightUpperLeg.to.Y), Vector2.new(b2.rightUpperLeg.from.X, b2.rightUpperLeg.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftUpperLeg, Vector2.new(b2.leftUpperLeg.to.X, b2.leftUpperLeg.to.Y), Vector2.new(b2.leftUpperLeg.from.X, b2.leftUpperLeg.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightLowerLeg, Vector2.new(b2.rightLowerLeg.from.X, b2.rightLowerLeg.from.Y), Vector2.new(b2.rightUpperLeg.from.X, b2.rightUpperLeg.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftLowerLeg, Vector2.new(b2.leftLowerLeg.from.X, b2.leftLowerLeg.from.Y), Vector2.new(b2.leftUpperLeg.from.X, b2.leftUpperLeg.from.Y), aC, az, 1.5, q)
				else
					local b2 = X(ax)
					ag(E.Bones[b1].Head, Vector2.new(b2.head.to.X, b2.head.to.Y), Vector2.new(b2.torso.to.X, b2.torso.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].Torso, Vector2.new(b2.torso.to.X, b2.torso.to.Y), Vector2.new(b2.torso.from.X, b2.torso.from.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightShoulder, Vector2.new(b2.torso.to.X, b2.torso.to.Y), Vector2.new(b2.rightArm.to.X, b2.rightArm.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightArm, Vector2.new(b2.rightArm.from.X, b2.rightArm.from.Y), Vector2.new(b2.rightArm.to.X, b2.rightArm.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftShoulder, Vector2.new(b2.torso.to.X, b2.torso.to.Y), Vector2.new(b2.leftArm.to.X, b2.leftArm.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftArm, Vector2.new(b2.leftArm.from.X, b2.leftArm.from.Y), Vector2.new(b2.leftArm.to.X, b2.leftArm.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftGroin, Vector2.new(b2.torso.from.X, b2.torso.from.Y), Vector2.new(b2.leftLeg.to.X, b2.leftLeg.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightGroin, Vector2.new(b2.torso.from.X, b2.torso.from.Y), Vector2.new(b2.rightLeg.to.X, b2.rightLeg.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].LeftLeg, Vector2.new(b2.leftLeg.from.X, b2.leftLeg.from.Y), Vector2.new(b2.leftLeg.to.X, b2.leftLeg.to.Y), aC, az, 1.5, q)
					ag(E.Bones[b1].RightLeg, Vector2.new(b2.rightLeg.from.X, b2.rightLeg.from.Y), Vector2.new(b2.rightLeg.to.X, b2.rightLeg.to.Y), aC, az, 1.5, q)
				end
			end;
			if B then
				local aO, aP = ax:GetBoundingBox()
				local aO = CFrame.new(aO.Position, e.CFrame.Position)
				local aQ = M({
					CFrame = aO,
					Size = aP
				})
				local b3 = aJ((aQ.topFrontRight + aQ.topBackRight) / 2)
				local b4 = aJ((aQ.bottomFrontRight + aQ.bottomBackRight) / 2)
				b3 = Vector2.new(b3.X - 10, b3.Y)
				b4 = Vector2.new(b3.X, b4.Y)
				ag(E.HealthBar.Back, b3, b4, Color3.fromRGB(255,255,255), az, e.ViewportSize.X / 192, 1)
				local b5 = ax.Humanoid.Health or aw[tostring(game.PlaceId)].Health()
				local b6 = ax.Humanoid.MaxHealth or aw[tostring(game.PlaceId)].MaxHealth()
				local b7 = b5 / b6;
				local aR = (b3 - b4).Magnitude * b7;
				ag(E.HealthBar.Front, Vector2.new(b4.X, b4.Y - aR), b4, Color3.fromRGB(255,255,255), az, e.ViewportSize.X / 192, 1)
			end;
			if A and t == "3D" then
				local aO, aP = ax:GetBoundingBox()
				local aQ = M({
					CFrame = aO,
					Size = aP
				})
				ag(E.Boxes.DDD.TopFront, aJ(aQ.topFrontLeft), aJ(aQ.topFrontRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.TopLeft, aJ(aQ.topFrontLeft), aJ(aQ.topBackLeft), aC, az, 1.5, q)
				ag(E.Boxes.DDD.TopRight, aJ(aQ.topFrontRight), aJ(aQ.topBackRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.TopBack, aJ(aQ.topBackLeft), aJ(aQ.topBackRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.FrontLeft, aJ(aQ.topFrontLeft), aJ(aQ.bottomFrontLeft), aC, az, 1.5, q)
				ag(E.Boxes.DDD.FrontRight, aJ(aQ.topFrontRight), aJ(aQ.bottomFrontRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.BackRight, aJ(aQ.topBackRight), aJ(aQ.bottomBackRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.BackLeft, aJ(aQ.topBackLeft), aJ(aQ.bottomBackLeft), aC, az, 1.5, q)
				ag(E.Boxes.DDD.BottonFront, aJ(aQ.bottomFrontLeft), aJ(aQ.bottomFrontRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.BottomLeft, aJ(aQ.bottomFrontLeft), aJ(aQ.bottomBackLeft), aC, az, 1.5, q)
				ag(E.Boxes.DDD.BottomRight, aJ(aQ.bottomFrontRight), aJ(aQ.bottomBackRight), aC, az, 1.5, q)
				ag(E.Boxes.DDD.BottomBack, aJ(aQ.bottomBackLeft), aJ(aQ.bottomBackRight), aC, az, 1.5, q)
			elseif A and t == "2D" then
				local aO, aP = ax:GetBoundingBox()
				aO = aO - (aO.Position - ax.HumanoidRootPart.CFrame.Position)
				local aQ = M({
					CFrame = aO,
					Size = aP
				})
				ag(E.Boxes.DD.Top, aJ((aQ.topFrontLeft + aQ.topBackLeft) / 2), aJ((aQ.topFrontRight + aQ.topBackRight) / 2), aC, az, 1.5, q)
				ag(E.Boxes.DD.Left, aJ((aQ.topFrontLeft + aQ.topBackLeft) / 2), aJ((aQ.bottomFrontLeft + aQ.bottomBackLeft) / 2), aC, az, 1.5, q)
				ag(E.Boxes.DD.Right, aJ((aQ.topFrontRight + aQ.topBackRight) / 2), aJ((aQ.bottomFrontRight + aQ.bottomBackRight) / 2), aC, az, 1.5, q)
				ag(E.Boxes.DD.Bottom, aJ((aQ.bottomFrontLeft + aQ.bottomBackLeft) / 2), aJ((aQ.bottomFrontRight + aQ.bottomBackRight) / 2), aC, az, 1.5, q)
			end
		end
	end
end;
